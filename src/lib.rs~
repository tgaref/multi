extern crate serde;
use serde::{Serialize, Deserialize};
use std::fs::{self, File};
use std::io::{self, BufReader};

pub mod setup;
pub mod create;
pub mod mark;


struct Answer {
    statement: String,
    correct: bool
}

struct Question {
    group: String,
    statement: String,
    answers: Vec<Answer>
}

#[derive(Serialize, Deserialize, Debug)]
struct Exam {
    name: String,
    footer: String,
    questions: Vec<Question>
}

struct ExamGroupProfile {
    group: String,
    num: usize,
    save_space: bool
}

#[derive(Serialize, Deserialize, Degub)]
struct ExamProfile {
    total: usize,
    seed: usize,
    profile: Vec<ExamGroupProfile>
}

struct MarkGroupProfile {
    group: String,
    correct_mark: f64,
    wrong_mark: f64
}

#[derive(Serialize, Deserialize, Degub)]
struct MarkProfile {
    total: usize,
    seed: usize,
    profile: Vec<ExamGroupProfile>
}

pub fn create_profile(questions_file: &str) -> io::Result<()> {
    let file = File::open(questions_file)?;
    let mut buf_reader = BufReader::new(file);
    let mut s = String::new();
    buf_reader.read_to_string(&s)?;
    let exam: Exam = serde_json::from_str(&s).expect("The questions file is not in valid json format");
    let (exam_profile, mark_profile) = setup(exam);
    Ok(())
}

